{"version":3,"sources":["components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","components/common/ApplicationMenu.js","components/applications/TodoListItem.js","components/common/CustomSelectInput.js","containers/applications/AddNewTodoModal.js","containers/applications/TodoApplicationMenu.js","views/app/applications/todo.js"],"names":["Colxx","props","widths","Separator","className","BreadcrumbItems","paths","match","path","substr","split","length","indexOf","filter","x","BreadcrumbContainer","heading","id","ApplicationMenu","children","containerRef","useRef","useState","isOpen","setIsOpen","handleDocumentClick","e","container","current","contains","target","useEffect","forEach","event","document","addEventListener","removeEventListener","ref","onClick","React","memo","item","handleCheckChange","isSelected","xxs","Card","CardBody","to","location","status","title","category","createDate","Badge","color","labelColor","pill","label","detail","map","i","CustomSelectInput","customProps","autoCorrect","autoCapitalize","Input","initialState","connect","todoApp","labels","categories","addTodoItemAction","addTodoItem","modalOpen","toggleModal","state","setState","Modal","toggle","wrapClassName","backdrop","ModalHeader","IntlMessages","ModalBody","Label","type","defaultValue","onChange","value","components","classNamePrefix","name","options","key","val","CustomInput","checked","defaultChecked","ModalFooter","Button","outline","newItem","addNetItem","todoItems","allTodoItems","loading","getTodoListWithFilterAction","getTodoListWithFilter","addFilter","column","suppressScrollX","wheelPropagation","NavItem","classnames","active","l","index","getIndex","arr","prop","injectIntl","searchKeyword","orderColumn","orderColumns","selectedItems","getTodoListAction","getTodoList","getTodoListWithOrderAction","getTodoListWithOrder","getTodoListSearchAction","getTodoListSearch","selectedTodoItemsChangeAction","selectedTodoItemsChange","intl","setModalOpen","lastChecked","setLastChecked","body","classList","add","remove","selectedList","Object","assign","includes","push","shiftKey","items","start","end","slice","Math","min","max","Array","from","Set","messages","style","padding","Row","size","Breadcrumb"],"mappings":"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","file":"static/js/application-todo.43db901c.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if('/'+sub===adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub, index) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/');\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {/* {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })} */}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { NavLink } from 'reactstrap';\n\nconst ApplicationMenu = ({ children }) => {\n  const containerRef = useRef();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleDocumentClick = (e) => {\n    if (isOpen) {\n      const container = containerRef.current;\n      if (container.contains(e.target) || container === e.target) {\n        return;\n      }\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    ['click', 'touchstart'].forEach((event) =>\n      document.addEventListener(event, handleDocumentClick, false)\n    );\n\n    return () => {\n      ['click', 'touchstart'].forEach((event) =>\n        document.removeEventListener(event, handleDocumentClick, false)\n      );\n    };\n  }, [isOpen]);\n\n  return (\n    <div ref={containerRef} className={`app-menu ${isOpen ? 'shown' : ''}`}>\n      {children}\n      <NavLink\n        className=\"app-menu-button d-inline-block d-xl-none\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <i className=\"simple-icon-options\" />\n      </NavLink>\n    </div>\n  );\n};\n\nexport default ApplicationMenu;\n","import React from 'react';\nimport { Card, CardBody, Badge, CustomInput } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport { Colxx } from '../common/CustomBootstrap';\n\nconst newText = text => text.split('\\n').map(i => <p>{i}</p>);\n\nconst TodoListItem = ({ item, handleCheckChange, isSelected }) => {\n  return (\n    <Colxx xxs=\"12\">\n      <Card className=\"card d-flex mb-3\">\n        <div className=\"d-flex flex-grow-1 min-width-zero\">\n          <CardBody className=\"align-self-center d-flex flex-column flex-md-row justify-content-between min-width-zero align-items-md-center\">\n            <NavLink\n              to=\"#\"\n              location={{}}\n              id={`toggler${item.id}`}\n              className=\"list-item-heading mb-0 truncate w-40 w-xs-100  mb-1 mt-1\"\n            >\n              <i\n                className={`${\n                  item.status === 'COMPLETED'\n                    ? 'simple-icon-check heading-icon'\n                    : 'simple-icon-refresh heading-icon'\n                }`}\n              />\n              <span className=\"align-middle d-inline-block\">{item.title}</span>\n            </NavLink>\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\n              {item.category}\n            </p>\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\n              {item.createDate}\n            </p>\n            <div className=\"w-15 w-xs-100\">\n              <Badge color={item.labelColor} pill>\n                {item.label}\n              </Badge>\n            </div>\n          </CardBody>\n          {/* <div className=\"custom-control custom-checkbox pl-1 align-self-center mr-4\">\n            <CustomInput\n              className=\"itemCheck mb-0\"\n              type=\"checkbox\"\n              id={`check_${item.id}`}\n              checked={isSelected}\n              onChange={(event) => handleCheckChange(event, item.id)}\n              label=\"\"\n            />\n          </div> */}\n        </div>\n        <div className=\"card-body pt-1\">\n          <p className=\"mb-0\">{newText(item.detail)}</p>\n        </div>\n      </Card>\n    </Colxx>\n  );\n};\n\nexport default React.memo(TodoListItem);\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  CustomInput,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Label,\n} from 'reactstrap';\nimport Select from 'react-select';\nimport CustomSelectInput from '../../components/common/CustomSelectInput';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport { addTodoItem } from '../../redux/actions';\n\nconst initialState = {\n  title: '',\n  detail: '',\n  label: {},\n  category: {},\n  status: 'PENDING',\n};\n\nconst AddNewTodoModal = ({\n  modalOpen,\n  toggleModal,\n  labels,\n  categories,\n  addTodoItemAction,\n}) => {\n  const [state, setState] = useState(initialState);\n\n  const addNetItem = () => {\n    const newItem = {\n      title: state.title,\n      detail: state.detail,\n      label: state.label.value,\n      labelColor: state.label.color,\n      category: state.category.value,\n      status: state.status,\n    };\n    addTodoItemAction(newItem);\n    toggleModal();\n    setState(initialState);\n  };\n\n  return (\n    <Modal\n      isOpen={modalOpen}\n      toggle={toggleModal}\n      wrapClassName=\"modal-right\"\n      backdrop=\"static\"\n    >\n      <ModalHeader toggle={toggleModal}>\n        <IntlMessages id=\"Add New Event\" />\n      </ModalHeader>\n      <ModalBody>\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.title\" />\n        </Label>\n        <Input\n          type=\"text\"\n          defaultValue={state.title}\n          onChange={(event) =>\n            setState({ ...state, title: event.target.value })\n          }\n        />\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.detail\" />\n        </Label>\n        <Input\n          type=\"textarea\"\n          defaultValue={state.detail}\n          onChange={(event) =>\n            setState({ ...state, detail: event.target.value })\n          }\n        />\n\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.category\" />\n        </Label>\n        <Select\n          components={{ Input: CustomSelectInput }}\n          className=\"react-select\"\n          classNamePrefix=\"react-select\"\n          name=\"form-field-name\"\n          options={categories.map((x, i) => {\n            return { label: x, value: x, key: i };\n          })}\n          value={state.category}\n          onChange={(val) => setState({ ...state, category: val })}\n        />\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.label\" />\n        </Label>\n        <Select\n          components={{ Input: CustomSelectInput }}\n          className=\"react-select\"\n          classNamePrefix=\"react-select\"\n          name=\"form-field-name\"\n          options={labels.map((x, i) => {\n            return {\n              label: x.label,\n              value: x.label,\n              key: i,\n              color: x.color,\n            };\n          })}\n          value={state.label}\n          onChange={(val) => setState({ ...state, label: val })}\n        />\n\n        <Label className=\"mt-4\">\n          <IntlMessages id=\"todo.status\" />\n        </Label>\n        <CustomInput\n          type=\"radio\"\n          id=\"exCustomRadio\"\n          name=\"customRadio\"\n          label=\"COMPLETED\"\n          checked={state.status === 'COMPLETED'}\n          onChange={(event) =>\n            setState({\n              ...state,\n              status: event.target.value === 'on' ? 'COMPLETED' : 'PENDING',\n            })\n          }\n        />\n        <CustomInput\n          type=\"radio\"\n          id=\"exCustomRadio2\"\n          name=\"customRadio2\"\n          label=\"PENDING\"\n          defaultChecked={state.status === 'PENDING'}\n          onChange={(event) =>\n            setState({\n              ...state,\n              status: event.target.value !== 'on' ? 'COMPLETED' : 'PENDING',\n            })\n          }\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" outline onClick={toggleModal}>\n          <IntlMessages id=\"todo.cancel\" />\n        </Button>\n        <Button color=\"primary\" onClick={() => addNetItem()}>\n          <IntlMessages id=\"todo.submit\" />\n        </Button>{' '}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const { labels, categories } = todoApp;\n  return {\n    labels,\n    categories,\n  };\n};\nexport default connect(mapStateToProps, {\n  addTodoItemAction: addTodoItem,\n})(AddNewTodoModal);\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { NavItem, Badge } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport classnames from 'classnames';\n\nimport IntlMessages from '../../helpers/IntlMessages';\nimport ApplicationMenu from '../../components/common/ApplicationMenu';\nimport { getTodoListWithFilter } from '../../redux/actions';\n\nconst TodoApplicationMenu = ({\n  todoItems,\n  filter,\n  allTodoItems,\n  loading,\n  labels,\n  categories,\n  getTodoListWithFilterAction,\n}) => {\n  const addFilter = (column, value) => {\n    getTodoListWithFilterAction(column, value);\n  };\n\n  return (\n    <ApplicationMenu>\n      <PerfectScrollbar\n        options={{ suppressScrollX: true, wheelPropagation: false }}\n      >\n        <div className=\"p-4\">\n          <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.status\" />\n          </p>\n          <ul className=\"list-unstyled mb-5\">\n            <NavItem className={classnames({ active: !filter })}>\n              <NavLink to=\"#\" onClick={() => addFilter('', '')} location={{}}>\n                <i className=\"simple-icon-reload\" />\n                <IntlMessages id=\"All Events\" />\n                <span className=\"float-right\">\n                  {loading && allTodoItems.length}\n                </span>\n              </NavLink>\n            </NavItem>\n            <NavItem\n              className={classnames({\n                active:\n                  filter &&\n                  filter.column === 'status' &&\n                  filter.value === 'PENDING',\n              })}\n            >\n              <NavLink\n                location={{}}\n                to=\"#\"\n                onClick={() => addFilter('status', 'PENDING')}\n              >\n                <i className=\"simple-icon-refresh\" />\n                <IntlMessages id=\"Pending Events\" />\n                <span className=\"float-right\">\n                  {loading &&\n                    todoItems.filter((x) => x.status === 'PENDING').length}\n                </span>\n              </NavLink>\n            </NavItem>\n            <NavItem\n              className={classnames({\n                active:\n                  filter &&\n                  filter.column === 'status' &&\n                  filter.value === 'COMPLETED',\n              })}\n            >\n              <NavLink\n                to=\"#\"\n                location={{}}\n                onClick={() => addFilter('status', 'COMPLETED')}\n              >\n                <i className=\"simple-icon-check\" />\n                <IntlMessages id=\"Completed Events\" />\n                <span className=\"float-right\">\n                  {loading &&\n                    todoItems.filter((x) => x.status === 'COMPLETED').length}\n                </span>\n              </NavLink>\n            </NavItem>\n          </ul>\n          {/* <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.categories\" />\n          </p>\n          <ul className=\"list-unstyled mb-5\">\n            {categories.map((c, index) => {\n              return (\n                <NavItem key={index}>\n                  <div onClick={() => addFilter('category', c)}>\n                    <div className=\"custom-control custom-radio\">\n                      <input\n                        type=\"radio\"\n                        className=\"custom-control-input\"\n                        defaultChecked={\n                          filter &&\n                          filter.column === 'category' &&\n                          filter.value === c\n                        }\n                      />\n                      <label className=\"custom-control-label\">{c}</label>\n                    </div>\n                  </div>\n                </NavItem>\n              );\n            })}\n          </ul> */}\n          <p className=\"text-muted text-small\">\n            <IntlMessages id=\"todo.labels\" />\n          </p>\n          <div>\n            {labels.map((l, index) => {\n              return (\n                <p className=\"d-sm-inline-block mb-1\" key={index}>\n                  <NavLink\n                    to=\"#\"\n                    location={{}}\n                    onClick={() => addFilter('label', l.label)}\n                  >\n                    <Badge\n                      className=\"mb-1\"\n                      color={`${\n                        filter &&\n                        filter.column === 'label' &&\n                        filter.value === l.label\n                          ? l.color\n                          : `outline-${l.color}`\n                      }`}\n                      pill\n                    >\n                      {l.label}\n                    </Badge>\n                  </NavLink>\n                </p>\n              );\n            })}\n          </div>\n        </div>\n      </PerfectScrollbar>\n    </ApplicationMenu>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const {\n    todoItems,\n    filter,\n    allTodoItems,\n    loading,\n    labels,\n    categories,\n  } = todoApp;\n\n  return {\n    todoItems,\n    filter,\n    allTodoItems,\n    loading,\n    labels,\n    categories,\n  };\n};\nexport default connect(mapStateToProps, {\n  getTodoListWithFilterAction: getTodoListWithFilter,\n})(TodoApplicationMenu);\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Row,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownMenu,\n  Collapse,\n  ButtonDropdown,\n  CustomInput,\n} from 'reactstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\n\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\n\nimport {\n  getTodoList,\n  getTodoListWithOrder,\n  getTodoListSearch,\n  selectedTodoItemsChange,\n} from '../../../redux/actions';\nimport TodoListItem from '../../../components/applications/TodoListItem';\nimport AddNewTodoModal from '../../../containers/applications/AddNewTodoModal';\nimport TodoApplicationMenu from '../../../containers/applications/TodoApplicationMenu';\n\nconst getIndex = (value, arr, prop) => {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i][prop] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst TodoApp = ({\n  match,\n  intl,\n  todoItems,\n  searchKeyword,\n  loading,\n  orderColumn,\n  orderColumns,\n  selectedItems,\n  getTodoListAction,\n  getTodoListWithOrderAction,\n  getTodoListSearchAction,\n  selectedTodoItemsChangeAction,\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [dropdownSplitOpen, setDropdownSplitOpen] = useState(false);\n  const [displayOptionsIsOpen, setDisplayOptionsIsOpen] = useState(false);\n  const [lastChecked, setLastChecked] = useState(null);\n\n  useEffect(() => {\n    document.body.classList.add('right-menu');\n    getTodoListAction();\n\n    return () => {\n      document.body.classList.remove('right-menu');\n    };\n  }, [getTodoListAction]);\n\n  const handleCheckChange = (event, id) => {\n    if (lastChecked == null) {\n      setLastChecked(id);\n    }\n\n    let selectedList = Object.assign([], selectedItems);\n    if (selectedList.includes(id)) {\n      selectedList = selectedList.filter((x) => x !== id);\n    } else {\n      selectedList.push(id);\n    }\n    selectedTodoItemsChangeAction(selectedList);\n\n    if (event.shiftKey) {\n      let items = todoItems;\n      const start = getIndex(id, items, 'id');\n      const end = getIndex(lastChecked, items, 'id');\n      items = items.slice(Math.min(start, end), Math.max(start, end) + 1);\n      selectedList.push(\n        ...items.map((item) => {\n          return item.id;\n        })\n      );\n      selectedList = Array.from(new Set(selectedList));\n      selectedTodoItemsChangeAction(selectedList);\n    }\n  };\n\n  const handleChangeSelectAll = () => {\n    if (loading) {\n      if (selectedItems.length >= todoItems.length) {\n        selectedTodoItemsChangeAction([]);\n      } else {\n        selectedTodoItemsChangeAction(todoItems.map((x) => x.id));\n      }\n    }\n  };\n\n  const { messages } = intl;\n\n  return (\n    <div style={{padding:\"20px\"}}>\n      <Row className=\"app-row survey-app\">\n        <Colxx xxs=\"12\">\n          <div className=\"mb-2\">\n            <h1>\n              <IntlMessages id=\"Agenda\" />\n            </h1>\n            {loading && (\n              <div className=\"text-zero top-right-button-container\">\n                <Button\n                  color=\"primary\"\n                  size=\"lg\"\n                  className=\"top-right-button\"\n                  onClick={() => setModalOpen(true)}\n                >\n                  <IntlMessages id=\"todo.add-new\" />\n                </Button>{' '}\n                {/* <ButtonDropdown\n                  isOpen={dropdownSplitOpen}\n                  toggle={() => setDropdownSplitOpen(!dropdownSplitOpen)}\n                >\n                  <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\n                    <CustomInput\n                      className=\"custom-checkbox mb-0 d-inline-block\"\n                      type=\"checkbox\"\n                      id=\"checkAll\"\n                      checked={selectedItems.length >= todoItems.length}\n                      onClick={() => handleChangeSelectAll()}\n                      onChange={() => handleChangeSelectAll()}\n                      label={\n                        <span\n                          className={`custom-control-label ${\n                            selectedItems.length > 0 &&\n                            selectedItems.length < todoItems.length\n                              ? 'indeterminate'\n                              : ''\n                          }`}\n                        />\n                      }\n                    />\n                  </div>\n                  <DropdownToggle\n                    caret\n                    color=\"primary\"\n                    className=\"dropdown-toggle-split btn-lg\"\n                  />\n                  <DropdownMenu right>\n                    <DropdownItem>\n                      <IntlMessages id=\"todo.action\" />\n                    </DropdownItem>\n                    <DropdownItem>\n                      <IntlMessages id=\"todo.another-action\" />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </ButtonDropdown> */}\n              </div>\n            )}\n            <Breadcrumb match={match} />\n          </div>\n\n          {/* <div className=\"mb-2\">\n            <Button\n              color=\"empty\"\n              className=\"pt-0 pl-0 d-inline-block d-md-none\"\n              onClick={() => setDisplayOptionsIsOpen(!displayOptionsIsOpen)}\n            >\n              <IntlMessages id=\"todo.display-options\" />{' '}\n              <i className=\"simple-icon-arrow-down align-middle\" />\n            </Button>\n            <Collapse\n              id=\"displayOptions\"\n              className=\"d-md-block\"\n              isOpen={displayOptionsIsOpen}\n            >\n              <div className=\"d-block mb-2 d-md-inline-block\">\n                <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\n                  <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\n                    <IntlMessages id=\"todo.orderby\" />\n                    {orderColumn ? orderColumn.label : ''}\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    {orderColumns.map((o, index) => {\n                      return (\n                        <DropdownItem\n                          key={index}\n                          onClick={() => getTodoListWithOrderAction(o.column)}\n                        >\n                          {o.label}\n                        </DropdownItem>\n                      );\n                    })}\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\n                  <input\n                    type=\"text\"\n                    name=\"keyword\"\n                    id=\"search\"\n                    placeholder={messages['menu.search']}\n                    defaultValue={searchKeyword}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        getTodoListSearchAction(e.target.value);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            </Collapse>\n          </div> */}\n          <Separator className=\"mb-5\" />\n          <Row>\n            {loading ? (\n              todoItems.map((item, index) => (\n                <TodoListItem\n                  key={`todo_item_${index}`}\n                  item={item}\n                  handleCheckChange={handleCheckChange}\n                  isSelected={loading ? selectedItems.includes(item.id) : false}\n                />\n              ))\n            ) : (\n              <div className=\"loading\" />\n            )}\n          </Row>\n        </Colxx>\n      </Row>\n      {loading && <TodoApplicationMenu />}\n      <AddNewTodoModal\n        toggleModal={() => setModalOpen(!modalOpen)}\n        modalOpen={modalOpen}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ todoApp }) => {\n  const {\n    todoItems,\n    searchKeyword,\n    loading,\n    orderColumn,\n    orderColumns,\n    selectedItems,\n  } = todoApp;\n  return {\n    todoItems,\n    searchKeyword,\n    loading,\n    orderColumn,\n    orderColumns,\n    selectedItems,\n  };\n};\nexport default injectIntl(\n  connect(mapStateToProps, {\n    getTodoListAction: getTodoList,\n    getTodoListWithOrderAction: getTodoListWithOrder,\n    getTodoListSearchAction: getTodoListSearch,\n    selectedTodoItemsChangeAction: selectedTodoItemsChange,\n  })(TodoApp)\n);\n"],"sourceRoot":""}