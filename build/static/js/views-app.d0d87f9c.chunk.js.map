{"version":3,"sources":["helpers/IntlMessages.js","containers/navs/Topnav.js","constants/menu.js","containers/navs/Sidebar.js","layout/AppLayout.js","views/app/index.js"],"names":["injectIntl","props","withRef","connect","menu","settings","containerClassnames","menuClickCount","selectedMenuHasSubItems","locale","setContainerClassnamesAction","setContainerClassnames","clickOnMobileMenuAction","clickOnMobileMenu","logoutUserAction","logoutUser","changeLocaleAction","changeLocale","intl","history","useState","isInFullScreen","setIsInFullScreen","currentUser","getCurrentUser","messages","className","to","adminRoot","type","id","onClick","isFS","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","docElm","documentElement","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","UncontrolledDropdown","DropdownToggle","color","title","alt","src","img","DropdownMenu","right","DropdownItem","divider","data","icon","label","subs","Sidebar","handleWindowResize","event","isTrusted","nextClasses","getMenuClassesForResize","join","handleDocumentClick","e","container","getContainer","isMenuClick","target","classList","contains","parentElement","setState","viewingParentMenu","toggle","classes","menuHiddenBreakpoint","subHiddenBreakpoint","split","filter","x","windowWidth","window","innerWidth","push","includes","ReactDOM","findDOMNode","changeSelectedMenuHasSubItems","currentClasses","clickIndex","handleProps","addEvents","forEach","addEventListener","removeEvents","removeEventListener","setSelectedLiActive","callback","oldli","querySelector","remove","oldliSub","selectedSublink","add","selectedlink","selectedParentMenu","getAttribute","selectedParentNoSubItem","state","menuItems","setHasSubItemStatus","hasSubmenu","getIsHasSubItem","menuItem","find","length","openSubMenu","selectedParent","hasSubMenu","preventDefault","addContainerClassname","closeSubMenu","toggleMenuCollapse","menuKey","collapsedMenus","indexOf","filteredList","roles","role","prevProps","this","location","pathname","scrollTo","options","suppressScrollX","wheelPropagation","isOpen","menuOpen","Nav","vertical","map","item","NavItem","key","classnames","active","newWindow","href","rel","IntlMessages","data-flag","data-parent","sub","index","Component","withRouter","authUser","changeDefaultClassnames","children","Dashboards","React","lazy","Pages","Applications","Ui","match","fallback","exact","from","url","path","render"],"mappings":"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","file":"static/js/views-app.d0d87f9c.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable no-use-before-define */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport {\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownMenu,\n  Input,\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport {\n  setContainerClassnames,\n  clickOnMobileMenu,\n  logoutUser,\n  changeLocale,\n} from '../../redux/actions';\n\nimport {\n  menuHiddenBreakpoint,\n  searchPath,\n  localeOptions,\n  isDarkSwitchActive,\n  buyUrl,\n  adminRoot,\n} from '../../constants/defaultValues';\n\nimport { MobileMenuIcon, MenuIcon } from '../../components/svg';\nimport TopnavDarkSwitch from './Topnav.DarkSwitch';\n\nimport { getDirection, setDirection, getCurrentUser } from '../../helpers/Utils';\n\nconst TopNav = ({\n  intl,\n  history,\n  containerClassnames,\n  menuClickCount,\n  selectedMenuHasSubItems,\n  locale,\n  setContainerClassnamesAction,\n  clickOnMobileMenuAction,\n  logoutUserAction,\n  changeLocaleAction,\n}) => {\n  const [isInFullScreen, setIsInFullScreen] = useState(false);\n  const [searchKeyword, setSearchKeyword] = useState('');\n\n  const search = () => {\n    history.push(`${searchPath}?key=${searchKeyword}`);\n    setSearchKeyword('');\n  };\n\n  const handleChangeLocale = (_locale, direction) => {\n    changeLocaleAction(_locale);\n\n    const currentDirection = getDirection().direction;\n    if (direction !== currentDirection) {\n      setDirection(direction);\n      setTimeout(() => {\n        window.location.reload();\n      }, 500);\n    }\n  };\n\n  const isInFullScreenFn = () => {\n    return (\n      (document.fullscreenElement && document.fullscreenElement !== null) ||\n      (document.webkitFullscreenElement &&\n        document.webkitFullscreenElement !== null) ||\n      (document.mozFullScreenElement &&\n        document.mozFullScreenElement !== null) ||\n      (document.msFullscreenElement && document.msFullscreenElement !== null)\n    );\n  };\n\n  const handleSearchIconClick = (e) => {\n    if (window.innerWidth < menuHiddenBreakpoint) {\n      let elem = e.target;\n      if (!e.target.classList.contains('search')) {\n        if (e.target.parentElement.classList.contains('search')) {\n          elem = e.target.parentElement;\n        } else if (\n          e.target.parentElement.parentElement.classList.contains('search')\n        ) {\n          elem = e.target.parentElement.parentElement;\n        }\n      }\n\n      if (elem.classList.contains('mobile-view')) {\n        search();\n        elem.classList.remove('mobile-view');\n        removeEventsSearch();\n      } else {\n        elem.classList.add('mobile-view');\n        addEventsSearch();\n      }\n    } else {\n      search();\n    }\n    e.stopPropagation();\n  };\n\n  const handleDocumentClickSearch = (e) => {\n    let isSearchClick = false;\n    if (\n      e.target &&\n      e.target.classList &&\n      (e.target.classList.contains('navbar') ||\n        e.target.classList.contains('simple-icon-magnifier'))\n    ) {\n      isSearchClick = true;\n      if (e.target.classList.contains('simple-icon-magnifier')) {\n        search();\n      }\n    } else if (\n      e.target.parentElement &&\n      e.target.parentElement.classList &&\n      e.target.parentElement.classList.contains('search')\n    ) {\n      isSearchClick = true;\n    }\n\n    if (!isSearchClick) {\n      const input = document.querySelector('.mobile-view');\n      if (input && input.classList) input.classList.remove('mobile-view');\n      removeEventsSearch();\n      setSearchKeyword('');\n    }\n  };\n\n  const removeEventsSearch = () => {\n    document.removeEventListener('click', handleDocumentClickSearch, true);\n  };\n\n  const addEventsSearch = () => {\n    document.addEventListener('click', handleDocumentClickSearch, true);\n  };\n\n  const handleSearchInputKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      search();\n    }\n  };\n\n  const toggleFullScreen = () => {\n    const isFS = isInFullScreenFn();\n\n    const docElm = document.documentElement;\n    if (!isFS) {\n      if (docElm.requestFullscreen) {\n        docElm.requestFullscreen();\n      } else if (docElm.mozRequestFullScreen) {\n        docElm.mozRequestFullScreen();\n      } else if (docElm.webkitRequestFullScreen) {\n        docElm.webkitRequestFullScreen();\n      } else if (docElm.msRequestFullscreen) {\n        docElm.msRequestFullscreen();\n      }\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n    }\n    setIsInFullScreen(!isFS);\n  };\n\n  const handleLogout = () => {\n    logoutUserAction(history);\n  };\n\n  const menuButtonClick = (e, _clickCount, _conClassnames) => {\n    e.preventDefault();\n\n    setTimeout(() => {\n      const event = document.createEvent('HTMLEvents');\n      event.initEvent('resize', false, false);\n      window.dispatchEvent(event);\n    }, 350);\n    setContainerClassnamesAction(\n      _clickCount + 1,\n      _conClassnames,\n      selectedMenuHasSubItems\n    );\n  };\n\n  const mobileMenuButtonClick = (e, _containerClassnames) => {\n    e.preventDefault();\n    clickOnMobileMenuAction(_containerClassnames);\n  };\n\n  const currentUser = getCurrentUser();\n\t\t// console.log(currentUser);\n\n  const { messages } = intl;\n  return (\n    <nav className=\"navbar fixed-top\">\n      <div className=\"d-flex align-items-center navbar-left\">\n      {/*}  <NavLink\n          to=\"#\"\n          location={{}}\n          className=\"menu-button d-none d-md-block\"\n          onClick={(e) =>\n            menuButtonClick(e, menuClickCount, containerClassnames)\n          }\n        >\n          <MenuIcon />\n        </NavLink>\n        <NavLink\n          to=\"#\"\n          location={{}}\n          className=\"menu-button-mobile d-xs-block d-sm-block d-md-none\"\n          onClick={(e) => mobileMenuButtonClick(e, containerClassnames)}\n        >\n          <MobileMenuIcon />\n        </NavLink>*/}\n      </div>\n\n      <NavLink className=\"navbar-logo\" to={adminRoot}>\n        <span className=\"logo d-none d-xs-block\" />\n        <span className=\"logo-mobile d-block d-xs-none\" />\n      </NavLink>\n\n      <div className=\"navbar-right\">\n        {/*{isDarkSwitchActive && <TopnavDarkSwitch />}*/}\n        <div className=\"header-icons d-inline-block align-middle\">\n          <button\n            className=\"header-icon btn btn-empty d-none d-sm-inline-block\"\n            type=\"button\"\n            id=\"fullScreenButton\"\n            onClick={toggleFullScreen}\n          >\n            {isInFullScreen ? (\n              <i className=\"simple-icon-size-actual d-block\" />\n            ) : (\n              <i className=\"simple-icon-size-fullscreen d-block\" />\n            )}\n          </button>\n        </div>\n        <div className=\"user d-inline-block\">\n          <UncontrolledDropdown className=\"dropdown-menu-right\">\n            <DropdownToggle className=\"p-0\" color=\"empty\">\n              <span className=\"name mr-1\">{currentUser.title}</span>\n              <span>\n                <img alt=\"Profile\" src={currentUser.img} />\n              </span>\n            </DropdownToggle>\n            <DropdownMenu className=\"mt-3\" right>\n              <DropdownItem><NavLink to={`/app/dashboards/profile`}>My Profile</NavLink></DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem onClick={() => handleLogout()}>\n                Sign out\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = ({ menu, settings }) => {\n  const { containerClassnames, menuClickCount, selectedMenuHasSubItems } = menu;\n  const { locale } = settings;\n  return {\n    containerClassnames,\n    menuClickCount,\n    selectedMenuHasSubItems,\n    locale,\n  };\n};\nexport default injectIntl(\n  connect(mapStateToProps, {\n    setContainerClassnamesAction: setContainerClassnames,\n    clickOnMobileMenuAction: clickOnMobileMenu,\n    logoutUserAction: logoutUser,\n    changeLocaleAction: changeLocale,\n  })(TopNav)\n);\n","import { adminRoot } from \"./defaultValues\";\n// import { UserRole } from \"../helpers/authHelper\"\n\nconst data = [\n  {\n    id: 'dashboards',\n    icon: 'iconsminds-shop-4',\n    label: 'Lobby',\n    to: `${adminRoot}/dashboards/default`,\n    // roles: [UserRole.Admin, UserRole.Editor],\n  },\n  {\n    id: 'applications',\n    icon: 'simple-icon-screen-desktop',\n    label: 'Sessions',\n    to: `${adminRoot}/applications`,\n    subs: [\n      {\n        icon: 'simple-icon-check',\n        label: 'Agenda',\n        to: `${adminRoot}/applications/todo`,\n      },\n      {\n        icon: 'simple-icon-check',\n        label: 'Chat',\n        to: `${adminRoot}/applications/chat`,\n      },\n      {\n        icon: 'simple-icon-bubbles',\n        label: 'Speakers Profile',\n        to: `${adminRoot}/applications/speaker`,\n      },\n    ],\n  },\n  {\n    id: 'menu',\n    icon: 'simple-icon-calculator',\n    label: 'Conference',\n    to: `${adminRoot}/applications/conference`,\n  },\n  {\n    id: 'docs',\n    icon: 'simple-icon-phone',\n    label: 'Lounge',\n    to: `${adminRoot}/dashboards/analytics`,\n    // roles: [UserRole.Admin, UserRole.Editor],\n  },\n  {\n    id: 'pages',\n    icon: 'iconsminds-library',\n    label: 'Resources',\n    to: `${adminRoot}/pages/blog`,\n    subs: [\n      {\n        icon: 'simple-icon-check',\n        label: 'Document library',\n        to: `${adminRoot}/pages/doc-lib`,\n      },\n      {\n        icon: 'simple-icon-calculator',\n        label: 'Video library',\n        to: `${adminRoot}/pages/video-lib`,\n      },\n    ],\n  },\n  {\n    id: 'ui',\n    icon: 'iconsminds-bucket',\n    label: 'Support',\n    to: `${adminRoot}/ui`,\n    subs: [\n      {\n        icon: 'simple-icon-check',\n        label: 'Help Desk',\n        to: `${adminRoot}/ui/help`,\n      },\n      {\n        icon: 'simple-icon-calculator',\n        label: 'FAQs',\n        to: `${adminRoot}/ui/faq`,\n      },\n    ],\n  },\n\n];\nexport default data;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { Nav, NavItem, Collapse } from 'reactstrap';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nimport IntlMessages from '../../helpers/IntlMessages';\n\nimport {\n  setContainerClassnames,\n  addContainerClassname,\n  changeDefaultClassnames,\n  changeSelectedMenuHasSubItems,\n\n} from '../../redux/actions';\n\nimport menuItems from '../../constants/menu';\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedParentMenu: '',\n      viewingParentMenu: '',\n      collapsedMenus: [],\n    };\n  }\n\n  handleWindowResize = (event) => {\n    if (event && !event.isTrusted) {\n      return;\n    }\n    const { containerClassnames } = this.props;\n    const nextClasses = this.getMenuClassesForResize(containerClassnames);\n    this.props.setContainerClassnames(\n      0,\n      nextClasses.join(' '),\n      this.props.selectedMenuHasSubItems\n    );\n  };\n\n  handleDocumentClick = (e) => {\n    const container = this.getContainer();\n    let isMenuClick = true;\n    if (\n      e.target &&\n      e.target.classList &&\n      (e.target.classList.contains('menu-button') ||\n        e.target.classList.contains('menu-button-mobile'))\n    ) {\n      isMenuClick = true;\n    } else if (\n      e.target.parentElement &&\n      e.target.parentElement.classList &&\n      (e.target.parentElement.classList.contains('menu-button') ||\n        e.target.parentElement.classList.contains('menu-button-mobile'))\n    ) {\n      isMenuClick = true;\n    } else if (\n      e.target.parentElement &&\n      e.target.parentElement.parentElement &&\n      e.target.parentElement.parentElement.classList &&\n      (e.target.parentElement.parentElement.classList.contains('menu-button') ||\n        e.target.parentElement.parentElement.classList.contains(\n          'menu-button-mobile'\n        ))\n    ) {\n      isMenuClick = true;\n    }\n    if (container.contains(e.target) || container === e.target || isMenuClick) {\n      return;\n    }\n    this.setState({\n      viewingParentMenu: '',\n    });\n    this.toggle();\n  };\n\n  getMenuClassesForResize = (classes) => {\n    const { menuHiddenBreakpoint, subHiddenBreakpoint } = this.props;\n    let nextClasses = classes.split(' ').filter((x) => x !== '');\n    const windowWidth = window.innerWidth;\n    if (windowWidth < menuHiddenBreakpoint) {\n      nextClasses.push('menu-mobile');\n    } else if (windowWidth < subHiddenBreakpoint) {\n      nextClasses = nextClasses.filter((x) => x !== 'menu-mobile');\n      if (\n        nextClasses.includes('menu-default') &&\n        !nextClasses.includes('menu-sub-hidden')\n      ) {\n        nextClasses.push('menu-sub-hidden');\n      }\n    } else {\n      nextClasses = nextClasses.filter((x) => x !== 'menu-mobile');\n      if (\n        nextClasses.includes('menu-default') &&\n        nextClasses.includes('menu-sub-hidden')\n      ) {\n        nextClasses = nextClasses.filter((x) => x !== 'menu-sub-hidden');\n      }\n    }\n    return nextClasses;\n  };\n\n  getContainer = () => {\n    return ReactDOM.findDOMNode(this);\n  };\n\n  toggle = () => {\n    const hasSubItems = false;\n    this.props.changeSelectedMenuHasSubItems(hasSubItems);\n    const { containerClassnames, menuClickCount } = this.props;\n    const currentClasses = containerClassnames\n      ? containerClassnames.split(' ').filter((x) => x !== '')\n      : '';\n    let clickIndex = -1;\n\n    if (!hasSubItems) {\n      if (\n        currentClasses.includes('menu-default') &&\n        (menuClickCount % 4 === 0 || menuClickCount % 4 === 3)\n      ) {\n        clickIndex = 1;\n      } else if (\n        currentClasses.includes('menu-default') &&\n        (menuClickCount === 2 || menuClickCount === 3)\n      ) {\n        clickIndex = 0;\n      } else if (\n        currentClasses.includes('menu-default') ||\n        currentClasses.includes('menu-default')\n      ) {\n        clickIndex = 0;\n      }\n    } else if (\n      currentClasses.includes('menu-sub-hidden') &&\n      menuClickCount === 3\n    ) {\n      clickIndex = 2;\n    } else if (\n      currentClasses.includes('menu-hidden') ||\n      currentClasses.includes('menu-mobile')\n    ) {\n      clickIndex = 0;\n    }\n    if (clickIndex >= 0) {\n      this.props.setContainerClassnames(\n        clickIndex,\n        containerClassnames,\n        hasSubItems\n      );\n    }\n  };\n\n  handleProps = () => {\n    this.addEvents();\n  };\n\n  addEvents = () => {\n    ['click', 'touchstart', 'touchend'].forEach((event) =>\n      document.addEventListener(event, this.handleDocumentClick, true)\n    );\n  };\n\n  removeEvents = () => {\n    ['click', 'touchstart', 'touchend'].forEach((event) =>\n      document.removeEventListener(event, this.handleDocumentClick, true)\n    );\n  };\n\n  setSelectedLiActive = (callback) => {\n    const oldli = document.querySelector('.sub-menu  li.active');\n    if (oldli != null) {\n      oldli.classList.remove('active');\n    }\n\n    const oldliSub = document.querySelector('.third-level-menu  li.active');\n    if (oldliSub != null) {\n      oldliSub.classList.remove('active');\n    }\n\n    /* set selected parent menu */\n    const selectedSublink = document.querySelector(\n      '.third-level-menu  a.active'\n    );\n    if (selectedSublink != null) {\n      selectedSublink.parentElement.classList.add('active');\n    }\n\n    const selectedlink = document.querySelector('.sub-menu  a.active');\n    if (selectedlink != null) {\n      selectedlink.parentElement.classList.add('active');\n      this.setState(\n        {\n          selectedParentMenu: selectedlink.parentElement.parentElement.getAttribute(\n            'data-parent'\n          ),\n        },\n        callback\n      );\n    } else {\n      const selectedParentNoSubItem = document.querySelector(\n        '.main-menu  li a.active'\n      );\n      if (selectedParentNoSubItem != null) {\n        this.setState(\n          {\n            selectedParentMenu: selectedParentNoSubItem.getAttribute(\n              'data-flag'\n            ),\n          },\n          callback\n        );\n      } else if (this.state.selectedParentMenu === '') {\n        this.setState(\n          {\n            selectedParentMenu: menuItems[0].id,\n          },\n          callback\n        );\n      }\n    }\n  };\n\n  setHasSubItemStatus = () => {\n    const hasSubmenu = this.getIsHasSubItem();\n    this.props.changeSelectedMenuHasSubItems(hasSubmenu);\n    this.toggle();\n  };\n\n  getIsHasSubItem = () => {\n    const { selectedParentMenu } = this.state;\n    const menuItem = menuItems.find((x) => x.id === selectedParentMenu);\n    if (menuItem)\n      return !!(menuItem && menuItem.subs && menuItem.subs.length > 0);\n    return false ;\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.setSelectedLiActive(this.setHasSubItemStatus);\n\n      window.scrollTo(0, 0);\n    }\n    this.handleProps();\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleWindowResize);\n    this.handleWindowResize();\n    this.handleProps();\n    this.setSelectedLiActive(this.setHasSubItemStatus);\n  }\n\n  componentWillUnmount() {\n    this.removeEvents();\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n\n  openSubMenu = (e, menuItem) => {\n    const selectedParent = menuItem.id;\n    const hasSubMenu = menuItem.subs && menuItem.subs.length > 0;\n    this.props.changeSelectedMenuHasSubItems(hasSubMenu);\n    if (!hasSubMenu) {\n      this.setState({\n        viewingParentMenu: selectedParent,\n        selectedParentMenu: selectedParent,\n      });\n      this.toggle();\n    } else {\n      e.preventDefault();\n\n      const { containerClassnames, menuClickCount } = this.props;\n      const currentClasses = containerClassnames\n        ? containerClassnames.split(' ').filter((x) => x !== '')\n        : '';\n\n      if (!currentClasses.includes('menu-mobile')) {\n        if (\n          currentClasses.includes('menu-default') &&\n          (menuClickCount === 2 || menuClickCount === 0)\n        ) {\n          this.props.setContainerClassnames(3, containerClassnames, hasSubMenu);\n        } else if (\n          currentClasses.includes('menu-sub-hidden') &&\n          (menuClickCount === 1 || menuClickCount === 3)\n        ) {\n          this.props.setContainerClassnames(2, containerClassnames, hasSubMenu);\n        } else if (\n          currentClasses.includes('menu-default') &&\n          !currentClasses.includes('menu-sub-hidden') &&\n          (menuClickCount === 1 || menuClickCount === 3)\n        ) {\n          this.props.setContainerClassnames(0, containerClassnames, hasSubMenu);\n        }\n      } else {\n        this.props.addContainerClassname(\n          'sub-show-temporary',\n          containerClassnames\n        );\n      }\n      this.setState({\n        viewingParentMenu: selectedParent,\n      });\n    }\n  };\n\n  closeSubMenu = (e, menuItem) => {\n    const selectedParent = menuItem.id;\n    const hasSubMenu = menuItem.subs && menuItem.subs.length > 0;\n    this.props.changeSelectedMenuHasSubItems(hasSubMenu);\n    if (1) {\n      this.setState({\n        viewingParentMenu: selectedParent,\n        selectedParentMenu: selectedParent,\n      });\n      this.toggle();\n    } else {\n      e.preventDefault();\n\n      const { containerClassnames, menuClickCount } = this.props;\n      const currentClasses = containerClassnames\n        ? containerClassnames.split(' ').filter((x) => x !== '')\n        : '';\n\n      if (!currentClasses.includes('menu-mobile')) {\n        if (\n          currentClasses.includes('menu-sub-hidden') &&\n          (menuClickCount === 2 || menuClickCount === 0)\n        ) {\n          this.props.setContainerClassnames(3, containerClassnames, hasSubMenu);\n        } else if (\n          currentClasses.includes('menu-hidden') &&\n          (menuClickCount === 1 || menuClickCount === 3)\n        ) {\n          this.props.setContainerClassnames(2, containerClassnames, hasSubMenu);\n        } else if (\n          currentClasses.includes('menu-default') &&\n          !currentClasses.includes('menu-sub-hidden') &&\n          (menuClickCount === 1 || menuClickCount === 3)\n        ) {\n          this.props.setContainerClassnames(0, containerClassnames, hasSubMenu);\n        }\n      } else {\n        this.props.addContainerClassname(\n          'sub-show-temporary',\n          containerClassnames\n        );\n      }\n      this.setState({\n        viewingParentMenu: selectedParent,\n      });\n    }\n  };\n\n  toggleMenuCollapse = (e, menuKey) => {\n    e.preventDefault();\n\n    const { collapsedMenus } = this.state;\n    if (collapsedMenus.indexOf(menuKey) > -1) {\n      this.setState({\n        collapsedMenus: collapsedMenus.filter((x) => x !== menuKey),\n      });\n    } else {\n      collapsedMenus.push(menuKey);\n      this.setState({\n        collapsedMenus,\n      });\n    }\n    return false;\n  };\n\n  filteredList = (menuItems) => {\n    const { currentUser } = this.props;\n    if (currentUser) {\n      return menuItems.filter(x => (x.roles && x.roles.includes(currentUser.role)) || !x.roles)\n    } else { return menuItems; }\n  }\n\n  render() {\n    const {\n      selectedParentMenu,\n      viewingParentMenu,\n      collapsedMenus,\n    } = this.state;\n\n    return (\n      <div className=\"sidebar\">\n        <div className=\"main-menu\">\n          <div className=\"scroll\">\n            <PerfectScrollbar\n              options={{ suppressScrollX: true, wheelPropagation: false }}\n              isOpen={this.state.menuOpen}\n            >\n              <Nav vertical className=\"list-unstyled\">\n                {menuItems &&\n                  this.filteredList(menuItems).map((item) => {\n                    return (\n                      <NavItem\n                        key={item.id}\n                        className={classnames({\n                          active:\n                            (selectedParentMenu === item.id &&\n                              viewingParentMenu === '') ||\n                            viewingParentMenu === item.id,\n                        })}\n                      >\n                        {item.newWindow ? (\n                          <a\n                            href={item.to}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                          >\n                            <i className={item.icon} />{' '}\n                            <IntlMessages id={item.label} />\n                          </a>\n                        ) : (\n                            <NavLink\n                              to={item.to}\n                              onClick={(e) => this.openSubMenu(e, item)}\n                              data-flag={item.id}\n                            >\n                              <i className={item.icon} />{' '}\n                              <IntlMessages id={item.label} />\n                            </NavLink>\n                          )}\n                      </NavItem>\n                    );\n                  })}\n              </Nav>\n            </PerfectScrollbar>\n          </div>\n        </div>\n\n        <div className=\"sub-menu\">\n          <div className=\"scroll\">\n            <PerfectScrollbar\n              options={{ suppressScrollX: true, wheelPropagation: false }}\n            >\n              {menuItems &&\n                this.filteredList(menuItems).map((item) => {\n                  return (\n                    <Nav\n                      key={item.id}\n                      className={classnames({\n                        'd-block':\n                          (this.state.selectedParentMenu === item.id &&\n                            this.state.viewingParentMenu === '') ||\n                          this.state.viewingParentMenu === item.id,\n                      })}\n                      data-parent={item.id}\n                    >\n                      {item.subs &&\n                        this.filteredList(item.subs).map((sub, index) => {\n                          return (\n                            <NavItem\n                              key={`${item.id}_${index}`}\n                              className={`${\n                                sub.subs && sub.subs.length > 0\n                                  ? 'has-sub-item'\n                                  : ''\n                                }`}\n                              onClick={(e) => this.closeSubMenu(e, sub)}\n                            >\n                              {sub.newWindow ? (\n                                <a\n                                  href={sub.to}\n                                  rel=\"noopener noreferrer\"\n                                  target=\"_blank\"\n                                >\n                                  <i className={sub.icon} />{' '}\n                                  <IntlMessages id={sub.label} />\n                                </a>\n                              ) : sub.subs && sub.subs.length > 0 ? (\n                                {/* <>\n                                  <NavLink\n                                    className={`rotate-arrow-icon opacity-50 ${\n                                      collapsedMenus.indexOf(\n                                        `${item.id}_${index}`\n                                      ) === -1\n                                        ? ''\n                                        : 'collapsed'\n                                      }`}\n                                    to={sub.to}\n                                    id={`${item.id}_${index}`}\n                                    onClick={(e) =>\n                                      this.toggleMenuCollapse(\n                                        e,\n                                        `${item.id}_${index}`\n                                      )\n                                    }\n                                  >\n                                    <i className=\"simple-icon-arrow-down\" />{' '}\n                                    <IntlMessages id={sub.label} />\n                                  </NavLink>\n\n                                  <Collapse\n                                    isOpen={\n                                      collapsedMenus.indexOf(\n                                        `${item.id}_${index}`\n                                      ) === -1\n                                    }\n                                  >\n                                    <Nav className=\"third-level-menu\">\n                                      {this.filteredList(sub.subs).map((thirdSub, thirdIndex) => {\n                                        return (\n                                          <NavItem\n                                            key={`${item.id}_${index}_${thirdIndex}`}\n                                          >\n                                            {thirdSub.newWindow ? (\n                                              <a\n                                                href={thirdSub.to}\n                                                rel=\"noopener noreferrer\"\n                                                target=\"_blank\"\n                                                onClick= {(e)=>this.toggleMenuCollapse(e,item)}\n                                              >\n                                                <i className={thirdSub.icon} />{' '}\n                                                <IntlMessages\n                                                  id={thirdSub.label}\n                                                />\n                                              </a>\n                                            ) : (\n                                                <NavLink to={thirdSub.to}>\n                                                  <i className={thirdSub.icon} />{' '}\n                                                  <IntlMessages\n                                                    id={thirdSub.label}\n                                                  />\n                                                </NavLink>\n                                              )}\n                                          </NavItem>\n                                        );\n                                      })}\n                                    </Nav>\n                                  </Collapse>\n                                </> */}\n                              ) : (\n                                    <NavLink to={sub.to}>\n                                      <i className={sub.icon} />{' '}\n                                      <IntlMessages id={sub.label} />\n                                    </NavLink>\n                                  )}\n                            </NavItem>\n                          );\n                        })}\n                    </Nav>\n                  );\n                })}\n            </PerfectScrollbar>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ menu, authUser }) => {\n  const {\n    containerClassnames,\n    subHiddenBreakpoint,\n    menuHiddenBreakpoint,\n    menuClickCount,\n    selectedMenuHasSubItems,\n  } = menu;\n\n  const { currentUser } = authUser;\n  return {\n    containerClassnames,\n    subHiddenBreakpoint,\n    menuHiddenBreakpoint,\n    menuClickCount,\n    selectedMenuHasSubItems,\n    currentUser\n  };\n};\nexport default withRouter(\n  connect(mapStateToProps, {\n    setContainerClassnames,\n    addContainerClassname,\n    changeDefaultClassnames,\n    changeSelectedMenuHasSubItems,\n  })(Sidebar)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport TopNav from '../containers/navs/Topnav';\nimport Sidebar from '../containers/navs/Sidebar';\n\nconst AppLayout = ({ containerClassnames, children, history }) => {\n  return (\n    <div id=\"app-container\" className={containerClassnames}>\n      <TopNav history={history} />\n      <Sidebar />\n      <main>\n        <div className=\"container-fluid\">{children}</div>\n      </main>\n    </div>\n  );\n};\nconst mapStateToProps = ({ menu }) => {\n  const { containerClassnames } = menu;\n  return { containerClassnames };\n};\nconst mapActionToProps = {};\n\nexport default withRouter(\n  connect(mapStateToProps, mapActionToProps)(AppLayout)\n);\n","import React, { Suspense } from 'react';\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport AppLayout from '../../layout/AppLayout';\n// import { ProtectedRoute, UserRole } from '../../helpers/authHelper';\n\nconst Dashboards = React.lazy(() =>\n  import(/* webpackChunkName: \"dashboards\" */ './dashboards')\n);\nconst Pages = React.lazy(() =>\n  import(/* webpackChunkName: \"pages\" */ './pages')\n);\nconst Applications = React.lazy(() =>\n  import(/* webpackChunkName: \"applications\" */ './applications')\n);\nconst Ui = React.lazy(() => import(/* webpackChunkName: \"ui\" */ './ui'));\n\n\nconst App = ({ match }) => {\n  return (\n    <AppLayout>\n      <div className=\"dashboard-wrapper\">\n        <Suspense fallback={<div className=\"loading\" />}>\n          <Switch>\n            <Redirect\n              exact\n              from={`${match.url}/`}\n              to={`${match.url}/dashboards`}\n            />\n            <Route\n              path={`${match.url}/dashboards`}\n              render={(props) => <Dashboards {...props} />}\n            />\n            <Route\n              path={`${match.url}/applications`}\n              render={(props) => <Applications {...props} />}\n            />\n            {/* <ProtectedRoute\n                    path={`${match.url}/applications`}\n                    component={Applications}\n                    roles={[UserRole.Admin]}\n            /> */}\n            <Route\n              path={`${match.url}/pages`}\n              render={(props) => <Pages {...props} />}\n            />\n            <Route\n              path={`${match.url}/ui`}\n              render={(props) => <Ui {...props} />}\n            />\n            <Redirect to=\"/error\" />\n          </Switch>\n        </Suspense>\n      </div>\n    </AppLayout>\n  );\n};\n\nconst mapStateToProps = ({ menu }) => {\n  const { containerClassnames } = menu;\n  return { containerClassnames };\n};\n\nexport default withRouter(connect(mapStateToProps, {})(App));\n"],"sourceRoot":""}